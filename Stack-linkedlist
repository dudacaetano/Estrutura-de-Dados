
from typing import Sized


class Node:
    def __init__(self, data):
        self.data = data
        self.next = None 
# Push(inserir na pilha )
# POP(remover da pilha )
# observar o topo da pilha 

class Pilha:
    def __init__(self):
        self.top = None 
        self._size = 0
    
    # PUSH
    def append(self, item):
        node = Node(item)
        node.next = self.top
        self.top = node 
        self._size = self._size + 1
    
    #POP
    def pop(self):

        if self._size > 0:
            node = self.top
            self.top =  self.top.next
            self._size = self._size - 1 
            return node.data
        raise  IndexError("The stack is empty")
    
    # topo da pilha (peek)
    def peek(self):
        if self._size > 0:
            return self.top.data
        raise  IndexError("The stack is empty")

    # Retorna o tamanho da pilha 
    def size (self):
        return len(self.data)
    
    # Representção da pilha 
    def __repr__(self):
        r =""
        pointer = self.top
        while(pointer):
            r = r + str(pointer.data) + "\n"
            pointer = pointer.next
        return r 
    def __str__(self):
        return self.__repr__()


     


if __name__ == "__main__":
    stack = Pilha()

    stack.append('A')
    stack.append('B')
    stack.append('C')
    print(stack)
    
    stack.pop()
    stack.pop()
    stack.pop()
    print(stack)
